package com.magic.acme.assist.jpa.xtt.entity;
// Generated 2017-6-22 10:27:00 by Hibernate Tools 5.2.0.CR1

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.OrderBy;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Handshake generated by hbm2java
 */
@Entity
@Table(name = "handshake", schema = "public")
public class Handshake implements java.io.Serializable {

    private String id;
    private Date creationDate;
    private String xttTokenId;
    private String barcodeNumber;
    private Boolean isPickup;
    private String xttPhoneNumber;
    private String comment;
    private Integer rate;
    private Double latitude;
    private Double longitude;
    private Date confirmationDate;
    private Double driverLatitude;
    private Double driverLongitude;
    private String milestone;
    private String hubTokenId;
    private String hubPhoneNumber;
    private Boolean multipleOrder;
    private String driverTokenId;
    private String driverPhoneNumber;
    private Integer confirmationResult;
    private Integer errorCode;
    private String errorMessage;
    private String relationId;
    private String owner;
    private String barcode;
    private Integer handshakeMode;

    private List<HandshakeCargoDiscrepancy> cargoDiscrepancyList = new ArrayList<HandshakeCargoDiscrepancy>();
    private List<HandshakeFile> fileList = new ArrayList<HandshakeFile>();
    private List<HandshakeNoCargo> noCargoList = new ArrayList<HandshakeNoCargo>();
    private List<HandshakeOrder> orderList = new ArrayList<HandshakeOrder>();
    private List<HandshakeOrderLineRejection> orderLineRejectionList = new ArrayList<HandshakeOrderLineRejection>();

    private Token driverToken;
    private Token XttToken;
    private HubToken hubToken;

    public Handshake() {
    }

    @Id
    @Column(name = "id", unique = true, nullable = false)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "creation_date", length = 29)
    public Date getCreationDate() {
        return this.creationDate;
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

    @Column(name = "xtt_token_id", insertable = false, updatable = false)
    public String getXttTokenId() {
        return this.xttTokenId;
    }

    public void setXttTokenId(String xttTokenId) {
        this.xttTokenId = xttTokenId;
    }

    @Column(name = "barcode_number", length = 13)
    public String getBarcodeNumber() {
        return this.barcodeNumber;
    }

    public void setBarcodeNumber(String barcodeNumber) {
        this.barcodeNumber = barcodeNumber;
    }

    @Column(name = "is_pickup")
    public Boolean getIsPickup() {
        return this.isPickup;
    }

    public void setIsPickup(Boolean isPickup) {
        this.isPickup = isPickup;
    }

    @Column(name = "xtt_phone_number")
    public String getXttPhoneNumber() {
        return this.xttPhoneNumber;
    }

    public void setXttPhoneNumber(String xttPhoneNumber) {
        this.xttPhoneNumber = xttPhoneNumber;
    }

    @Column(name = "comment", length = 1000)
    public String getComment() {
        return this.comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    @Column(name = "rate")
    public Integer getRate() {
        return this.rate;
    }

    public void setRate(Integer rate) {
        this.rate = rate;
    }

    @Column(name = "latitude", precision = 17, scale = 17)
    public Double getLatitude() {
        return this.latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    @Column(name = "longitude", precision = 17, scale = 17)
    public Double getLongitude() {
        return this.longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "confirmation_date", length = 29)
    public Date getConfirmationDate() {
        return this.confirmationDate;
    }

    public void setConfirmationDate(Date confirmationDate) {
        this.confirmationDate = confirmationDate;
    }

    @Column(name = "driver_latitude", precision = 17, scale = 17)
    public Double getDriverLatitude() {
        return this.driverLatitude;
    }

    public void setDriverLatitude(Double driverLatitude) {
        this.driverLatitude = driverLatitude;
    }

    @Column(name = "driver_longitude", precision = 17, scale = 17)
    public Double getDriverLongitude() {
        return this.driverLongitude;
    }

    public void setDriverLongitude(Double driverLongitude) {
        this.driverLongitude = driverLongitude;
    }

    @Column(name = "milestone")
    public String getMilestone() {
        return this.milestone;
    }

    public void setMilestone(String milestone) {
        this.milestone = milestone;
    }

    @Column(name = "hub_token_id", insertable = false, updatable = false)
    public String getHubTokenId() {
        return this.hubTokenId;
    }

    public void setHubTokenId(String hubTokenId) {
        this.hubTokenId = hubTokenId;
    }

    @Column(name = "hub_phone_number")
    public String getHubPhoneNumber() {
        return this.hubPhoneNumber;
    }

    public void setHubPhoneNumber(String hubPhoneNumber) {
        this.hubPhoneNumber = hubPhoneNumber;
    }

    @Column(name = "multiple_order")
    public Boolean getMultipleOrder() {
        return this.multipleOrder;
    }

    public void setMultipleOrder(Boolean multipleOrder) {
        this.multipleOrder = multipleOrder;
    }

    @Column(name = "driver_token_id", insertable = false, updatable = false)
    public String getDriverTokenId() {
        return this.driverTokenId;
    }

    public void setDriverTokenId(String driverTokenId) {
        this.driverTokenId = driverTokenId;
    }

    @Column(name = "driver_phone_number")
    public String getDriverPhoneNumber() {
        return this.driverPhoneNumber;
    }

    public void setDriverPhoneNumber(String driverPhoneNumber) {
        this.driverPhoneNumber = driverPhoneNumber;
    }

    @Column(name = "confirmation_result")
    public Integer getConfirmationResult() {
        return this.confirmationResult;
    }

    public void setConfirmationResult(Integer confirmationResult) {
        this.confirmationResult = confirmationResult;
    }

    @Column(name = "error_code")
    public Integer getErrorCode() {
        return this.errorCode;
    }

    public void setErrorCode(Integer errorCode) {
        this.errorCode = errorCode;
    }

    @Column(name = "error_message")
    public String getErrorMessage() {
        return this.errorMessage;
    }

    public void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
    }

    @Column(name = "relation_id", length = 225)
    public String getRelationId() {
        return this.relationId;
    }

    public void setRelationId(String relationId) {
        this.relationId = relationId;
    }

    @Column(name = "owner", length = 225)
    public String getOwner() {
        return this.owner;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    @Column(name = "barcode", length = 18)
    public String getBarcode() {
        return this.barcode;
    }

    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    @Column(name = "handshake_mode")
    public Integer getHandshakeMode() {
        return this.handshakeMode;
    }

    public void setHandshakeMode(Integer handshakeMode) {
        this.handshakeMode = handshakeMode;
    }

    @OneToMany(mappedBy = "handshake", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    public List<HandshakeCargoDiscrepancy> getCargoDiscrepancyList() {
        return cargoDiscrepancyList;
    }

    public void setCargoDiscrepancyList(List<HandshakeCargoDiscrepancy> cargoDiscrepancyList) {
        this.cargoDiscrepancyList = cargoDiscrepancyList;
    }

    @OneToMany(mappedBy = "handshake", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    public List<HandshakeFile> getFileList() {
        return fileList;
    }

    public void setFileList(List<HandshakeFile> fileList) {
        this.fileList = fileList;
    }

    @OneToMany(mappedBy = "handshake", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    public List<HandshakeNoCargo> getNoCargoList() {
        return noCargoList;
    }

    public void setNoCargoList(List<HandshakeNoCargo> noCargoList) {
        this.noCargoList = noCargoList;
    }

    @OneToMany(mappedBy = "handshake", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    public List<HandshakeOrder> getOrderList() {
        return orderList;
    }

    public void setOrderList(List<HandshakeOrder> orderList) {
        this.orderList = orderList;
    }

    @OneToMany(mappedBy = "handshake", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    public List<HandshakeOrderLineRejection> getOrderLineRejectionList() {
        return orderLineRejectionList;
    }

    public void setOrderLineRejectionList(List<HandshakeOrderLineRejection> orderLineRejectionList) {
        this.orderLineRejectionList = orderLineRejectionList;
    }

    @OneToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "driver_token_id", referencedColumnName = "id")
    public Token getDriverToken() {
        return driverToken;
    }

    public void setDriverToken(Token driverToken) {
        this.driverToken = driverToken;
    }

    @OneToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "xtt_token_id", referencedColumnName = "id")
    public Token getXttToken() {
        return XttToken;
    }

    public void setXttToken(Token xttToken) {
        XttToken = xttToken;
    }

    @OneToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "hub_token_id", referencedColumnName = "id")
    public HubToken getHubToken() {
        return hubToken;
    }

    public void setHubToken(HubToken hubToken) {
        this.hubToken = hubToken;
    }
}
